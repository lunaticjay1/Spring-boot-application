package com.customers.Springboot.application.exception;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.NoHandlerFoundException;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

@ControllerAdvice
public class CustomExceptionHandler extends ResponseEntityExceptionHandler {
	@Override
	protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,
			HttpHeaders headers, HttpStatus status, WebRequest request) {
		List<ErrorDetails> details = new ArrayList<>();
		for (FieldError error : ex.getBindingResult().getFieldErrors()) {
			ErrorDetails errors = new ErrorDetails();
			errors.setCode("CUS1001");
			errors.setDescription(error.getDefaultMessage());
			// In the above line we are getting .getDefaultMessage from
			// the message given at controller right?
			if (error.getDefaultMessage().contains("size")) {
				errors.setDescription(error.getField()+ " " + error.getDefaultMessage());
				// In the above .getDefaultMessage from where it is
				// taking the message or is it generated by spring
			}
			details.add(errors);
		}
		ErrorResponse error = new ErrorResponse("Fatal", "Customer System", details);
		return new ResponseEntity<Object>(error, HttpStatus.BAD_REQUEST);
	}

}
